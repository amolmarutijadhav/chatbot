#!/usr/bin/env python3
"""
Helper script to set up environment variables for the chatbot.
"""

import os
import sys
from pathlib import Path


def setup_environment():
    """Set up environment variables interactively."""
    print("🔧 Intelligent MCP Chatbot - Environment Setup")
    print("=" * 50)
    
    # Check if .env file exists
    env_file = Path(".env")
    if env_file.exists():
        print("✅ .env file already exists")
        response = input("Do you want to overwrite it? (y/N): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Get OpenAI API key
    print("\n📝 OpenAI API Key Setup")
    print("Get your API key from: https://platform.openai.com/api-keys")
    
    api_key = input("Enter your OpenAI API key (starts with 'sk-'): ").strip()
    
    if not api_key:
        print("❌ API key is required!")
        return
    
    if not api_key.startswith('sk-'):
        print("⚠️  Warning: API key should start with 'sk-'")
        response = input("Continue anyway? (y/N): ").lower()
        if response != 'y':
            return
    
    # Create .env file
    env_content = f"""# Environment Variables for Intelligent MCP Chatbot
# Generated by setup script

# OpenAI API Configuration
OPENAI_API_KEY={api_key}

# Environment Settings
CHATBOT_ENVIRONMENT=development
CHATBOT_DEBUG=true

# Alternative LLM Providers (uncomment and configure if needed)
# ANTHROPIC_API_KEY=your-anthropic-api-key-here

# MCP Server API Keys (uncomment and configure if needed)
# MCP_API_KEY=your-mcp-api-key-here
# DB_API_KEY=your-database-api-key-here

# JWT Secret for Authentication (uncomment and configure if needed)
# JWT_SECRET_KEY=your-jwt-secret-key-here
"""
    
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"✅ .env file created successfully!")
        print(f"📁 Location: {env_file.absolute()}")
        
        # Show next steps
        print("\n🚀 Next Steps:")
        print("1. Test your configuration:")
        print("   python scripts/test_llm_config.py")
        print("\n2. Run the chatbot:")
        print("   python src/main.py demo")
        print("   python src/main.py interactive")
        print("   python src/api_main.py")
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")


def load_env_file():
    """Load environment variables from .env file."""
    env_file = Path(".env")
    if not env_file.exists():
        print("❌ .env file not found!")
        print("Run 'python scripts/setup_env.py' to create it.")
        return False
    
    try:
        from dotenv import load_dotenv
        load_dotenv(env_file)
        print("✅ Environment variables loaded from .env file")
        return True
    except ImportError:
        print("❌ python-dotenv not installed!")
        print("Install it with: pip install python-dotenv")
        return False
    except Exception as e:
        print(f"❌ Error loading .env file: {e}")
        return False


def main():
    """Main function."""
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "load":
            load_env_file()
        elif command == "setup":
            setup_environment()
        else:
            print("Usage: python scripts/setup_env.py [setup|load]")
            print("  setup: Create .env file interactively")
            print("  load:  Load environment variables from .env file")
    else:
        setup_environment()


if __name__ == "__main__":
    main() 